name: Deploy to Cloudflare

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggers

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    name: Deploy Frontend to Cloudflare Pages
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Verify package files
        run: |
          echo "üì¶ Checking package configuration..."
          ls -la package*.json
          echo ""
          echo "üìã Package.json contents:"
          cat package.json

      - name: Install dependencies
        run: |
          echo "üì• Installing dependencies..."
          if [ -f package-lock.json ]; then
            echo "Using npm ci for locked dependencies"
            npm ci
          else
            echo "Using npm install (no lock file)"
            npm install
          fi

      - name: Verify dependencies
        run: |
          echo "‚úÖ Checking installed dependencies..."
          npm list --depth=0 || echo "‚ö†Ô∏è  Some dependencies may have issues"

      - name: Build frontend
        run: |
          echo "üèóÔ∏è  Building frontend..."
          npm run build
        env:
          # Use secrets with fallback to default values for initial deployment
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'https://creator-tools-api.ckorhonen.workers.dev' }}
          VITE_TWITTER_CLIENT_ID: ${{ secrets.VITE_TWITTER_CLIENT_ID || '' }}
          VITE_LINKEDIN_CLIENT_ID: ${{ secrets.VITE_LINKEDIN_CLIENT_ID || '' }}
          VITE_INSTAGRAM_APP_ID: ${{ secrets.VITE_INSTAGRAM_APP_ID || '' }}

      - name: Verify build output
        run: |
          echo "üìÅ Checking build output..."
          if [ -d "dist" ]; then
            echo "‚úÖ dist directory exists"
            ls -lah dist/
            echo ""
            echo "üìä Build size:"
            du -sh dist/
          else
            echo "‚ùå dist directory not found!"
            exit 1
          fi

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: creator-tools-mvp
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  deploy-workers:
    runs-on: ubuntu-latest
    name: Deploy Workers API
    defaults:
      run:
        working-directory: workers/api
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'workers/api/package-lock.json'

      - name: Verify Workers configuration
        run: |
          echo "üì¶ Checking Workers API configuration..."
          ls -la
          echo ""
          echo "üìã Package.json:"
          cat package.json
          echo ""
          echo "‚öôÔ∏è  Wrangler.toml:"
          cat wrangler.toml

      - name: Install dependencies
        run: |
          echo "üì• Installing Workers dependencies..."
          if [ -f package-lock.json ]; then
            echo "Using npm ci for locked dependencies"
            npm ci
          else
            echo "Using npm install (no lock file)"
            npm install
          fi

      - name: Verify dependencies
        run: |
          echo "‚úÖ Checking installed dependencies..."
          npm list --depth=0 || echo "‚ö†Ô∏è  Some dependencies may have issues"

      - name: Verify TypeScript source
        run: |
          echo "üìù Checking TypeScript source..."
          if [ -f "src/index.ts" ]; then
            echo "‚úÖ src/index.ts exists"
            wc -l src/index.ts
          else
            echo "‚ùå src/index.ts not found!"
            exit 1
          fi

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: workers/api
