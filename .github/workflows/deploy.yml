name: Deploy to Cloudflare

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggers

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    name: Deploy Frontend to Cloudflare Pages
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # NO CACHE - package-lock.json doesn't exist at root

      - name: Validate Cloudflare Secrets
        if: github.event_name != 'pull_request'
        run: |
          echo "🔍 Validating Cloudflare secrets..."
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "❌ ERROR: CLOUDFLARE_API_TOKEN secret is not set"
            echo ""
            echo "To fix this:"
            echo "1. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "2. Click 'New repository secret'"
            echo "3. Name: CLOUDFLARE_API_TOKEN"
            echo "4. Value: Your Cloudflare API token"
            exit 1
          fi
          if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "❌ ERROR: CLOUDFLARE_ACCOUNT_ID secret is not set"
            echo ""
            echo "To fix this:"
            echo "1. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "2. Click 'New repository secret'"
            echo "3. Name: CLOUDFLARE_ACCOUNT_ID"
            echo "4. Value: Your Cloudflare Account ID"
            exit 1
          fi
          echo "✅ All required secrets are configured"

      - name: Clean and install dependencies
        run: |
          echo "🧹 Cleaning any existing lock files..."
          rm -f package-lock.json
          echo "📦 Installing frontend dependencies..."
          npm install
          echo "✅ Dependencies installed successfully"
        
      - name: Verify installation
        run: |
          echo "🔍 Verifying node_modules..."
          if [ ! -d "node_modules" ]; then
            echo "❌ Error: node_modules directory not found"
            exit 1
          fi
          echo "✅ node_modules exists"
          ls -la node_modules/ | head -20

      - name: Type Check
        run: |
          echo "🔍 Running TypeScript type check..."
          npm run type-check || {
            echo "❌ TypeScript type check failed"
            echo "Run 'npm run type-check' locally to see detailed errors"
            exit 1
          }
          echo "✅ Type check passed"
          
      - name: Build
        run: |
          echo "🏗️ Building frontend..."
          npm run build
          echo "✅ Build completed"
        env:
          # Use secrets with fallback to default values for initial deployment
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'https://creator-tools-api.ckorhonen.workers.dev' }}
          VITE_TWITTER_CLIENT_ID: ${{ secrets.VITE_TWITTER_CLIENT_ID || '' }}
          VITE_LINKEDIN_CLIENT_ID: ${{ secrets.VITE_LINKEDIN_CLIENT_ID || '' }}
          VITE_INSTAGRAM_APP_ID: ${{ secrets.VITE_INSTAGRAM_APP_ID || '' }}

      - name: Verify build output
        run: |
          echo "📂 Checking dist directory..."
          if [ ! -d "dist" ]; then
            echo "❌ Error: dist directory not found after build"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Error: dist/index.html not found"
            exit 1
          fi
          echo "✅ Build output verified:"
          ls -lah dist/
          du -sh dist/
          
      - name: Deploy to Cloudflare Pages
        if: github.event_name != 'pull_request'
        id: deploy-pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: creator-tools-mvp
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Deployment Summary
        if: github.event_name != 'pull_request' && success()
        run: |
          echo "## ✅ Frontend Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 Successfully deployed to Cloudflare Pages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Frontend URL:** https://creator-tools-mvp.pages.dev" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Build Info:**" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

  deploy-workers:
    runs-on: ubuntu-latest
    name: Deploy Workers API
    defaults:
      run:
        working-directory: workers/api
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # NO CACHE - package-lock.json may be corrupted

      - name: Validate Cloudflare Secrets
        if: github.event_name != 'pull_request'
        run: |
          echo "🔍 Validating Cloudflare secrets..."
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "❌ ERROR: CLOUDFLARE_API_TOKEN secret is not set"
            echo ""
            echo "To fix this:"
            echo "1. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "2. Click 'New repository secret'"
            echo "3. Name: CLOUDFLARE_API_TOKEN"
            echo "4. Value: Your Cloudflare API token"
            exit 1
          fi
          if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "❌ ERROR: CLOUDFLARE_ACCOUNT_ID secret is not set"
            echo ""
            echo "To fix this:"
            echo "1. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "2. Click 'New repository secret'"
            echo "3. Name: CLOUDFLARE_ACCOUNT_ID"
            echo "4. Value: Your Cloudflare Account ID"
            exit 1
          fi
          echo "✅ All required secrets are configured"

      - name: Clean and install dependencies
        run: |
          echo "🧹 Cleaning any existing lock files..."
          rm -f package-lock.json
          echo "📦 Installing Workers API dependencies..."
          npm install
          echo "✅ Dependencies installed successfully"

      - name: Verify installation
        run: |
          echo "🔍 Verifying node_modules..."
          if [ ! -d "node_modules" ]; then
            echo "❌ Error: node_modules directory not found"
            exit 1
          fi
          echo "✅ node_modules exists"
          
          echo "🔍 Checking for wrangler..."
          if [ ! -f "node_modules/.bin/wrangler" ]; then
            echo "⚠️ Warning: wrangler not found in node_modules"
          else
            echo "✅ wrangler found"
          fi

      - name: Verify wrangler.toml
        run: |
          echo "📋 Checking wrangler.toml configuration..."
          if [ ! -f "wrangler.toml" ]; then
            echo "❌ Error: wrangler.toml not found"
            exit 1
          fi
          echo "✅ wrangler.toml found:"
          cat wrangler.toml
          echo ""
          
          echo "📋 Checking TypeScript source..."
          if [ ! -f "src/index.ts" ]; then
            echo "❌ Error: src/index.ts not found"
            exit 1
          fi
          echo "✅ src/index.ts exists"

      - name: Deploy to Cloudflare Workers
        if: github.event_name != 'pull_request'
        id: deploy-worker
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: workers/api

      - name: Deployment Summary
        if: github.event_name != 'pull_request' && success()
        run: |
          echo "## ✅ Workers API Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Successfully deployed to Cloudflare Workers" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **API URL:** https://creator-tools-api.ckorhonen.workers.dev" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **Note:** Database not yet configured. See DEPLOYMENT.md for D1 setup instructions." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Build Info:**" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
