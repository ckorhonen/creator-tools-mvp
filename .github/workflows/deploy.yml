name: Deploy to Cloudflare

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    name: Deploy Frontend to Cloudflare Pages
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          echo "üì¶ Installing frontend dependencies..."
          npm install
        
      - name: Type check
        run: |
          echo "üîç Running TypeScript type check..."
          npm run type-check
          echo "‚úÖ Type check passed"

      - name: Build
        run: |
          echo "üèóÔ∏è  Building frontend..."
          npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'https://creator-tools-api.ckorhonen.workers.dev' }}
          VITE_TWITTER_CLIENT_ID: ${{ secrets.VITE_TWITTER_CLIENT_ID || '' }}
          VITE_LINKEDIN_CLIENT_ID: ${{ secrets.VITE_LINKEDIN_CLIENT_ID || '' }}
          VITE_INSTAGRAM_APP_ID: ${{ secrets.VITE_INSTAGRAM_APP_ID || '' }}

      - name: Verify build output
        run: |
          echo "üîç Checking dist directory..."
          if [ ! -d "dist" ]; then
            echo "‚ùå Error: dist directory not found after build"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Error: dist/index.html not found"
            exit 1
          fi
          ls -la dist/
          echo "‚úÖ Build output verified successfully"

      - name: Validate Cloudflare secrets
        if: github.event_name != 'pull_request'
        run: |
          echo "üîê Validating Cloudflare secrets..."
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "‚ùå CLOUDFLARE_API_TOKEN is not set"
            echo ""
            echo "üìö To configure Cloudflare secrets:"
            echo "1. Get API Token: https://dash.cloudflare.com/profile/api-tokens"
            echo "2. Get Account ID: https://dash.cloudflare.com (right sidebar)"
            echo "3. Add secrets: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo ""
            echo "See issue #48 or DEPLOYMENT_STATUS_CURRENT.md for detailed instructions"
            exit 1
          fi
          if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "‚ùå CLOUDFLARE_ACCOUNT_ID is not set"
            echo ""
            echo "üìö To configure Cloudflare secrets:"
            echo "1. Get Account ID: https://dash.cloudflare.com (right sidebar)"
            echo "2. Add secret: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo ""
            echo "See issue #48 or DEPLOYMENT_STATUS_CURRENT.md for detailed instructions"
            exit 1
          fi
          echo "‚úÖ Cloudflare secrets validated"
          
      - name: Deploy to Cloudflare Pages
        if: github.event_name != 'pull_request'
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: creator-tools-mvp
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Deployment summary
        if: github.event_name != 'pull_request' && success()
        run: |
          echo "üéâ Frontend deployed successfully!"
          echo "üåê URL: https://creator-tools-mvp.pages.dev"

  deploy-workers:
    runs-on: ubuntu-latest
    name: Deploy Workers API
    defaults:
      run:
        working-directory: workers/api
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          echo "üì¶ Installing Workers API dependencies..."
          npm install
          echo "‚úÖ Dependencies installed"

      - name: Verify wrangler installation
        run: |
          echo "üîç Verifying wrangler installation..."
          if ! npx wrangler --version; then
            echo "‚ùå Error: wrangler not found"
            exit 1
          fi
          echo "‚úÖ Wrangler verified"

      - name: Verify wrangler.toml
        run: |
          echo "üîç Checking wrangler.toml configuration..."
          if [ ! -f "wrangler.toml" ]; then
            echo "‚ùå Error: wrangler.toml not found"
            exit 1
          fi
          cat wrangler.toml
          echo "‚úÖ wrangler.toml found and valid"

      - name: Verify source files
        run: |
          echo "üîç Checking source files..."
          if [ ! -f "src/index.ts" ]; then
            echo "‚ùå Error: src/index.ts not found"
            exit 1
          fi
          echo "‚úÖ Source files verified"

      - name: Validate Cloudflare secrets
        if: github.event_name != 'pull_request'
        run: |
          echo "üîê Validating Cloudflare secrets..."
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "‚ùå CLOUDFLARE_API_TOKEN is not set"
            echo ""
            echo "üìö To configure Cloudflare secrets:"
            echo "1. Get API Token: https://dash.cloudflare.com/profile/api-tokens"
            echo "2. Get Account ID: https://dash.cloudflare.com (right sidebar)"
            echo "3. Add secrets: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo ""
            echo "See issue #48 or DEPLOYMENT_STATUS_CURRENT.md for detailed instructions"
            exit 1
          fi
          if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "‚ùå CLOUDFLARE_ACCOUNT_ID is not set"
            echo ""
            echo "üìö To configure Cloudflare secrets:"
            echo "1. Get Account ID: https://dash.cloudflare.com (right sidebar)"
            echo "2. Add secret: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo ""
            echo "See issue #48 or DEPLOYMENT_STATUS_CURRENT.md for detailed instructions"
            exit 1
          fi
          echo "‚úÖ Cloudflare secrets validated"

      - name: Deploy to Cloudflare Workers
        if: github.event_name != 'pull_request'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: workers/api

      - name: Deployment summary
        if: github.event_name != 'pull_request' && success()
        run: |
          echo "üéâ Workers API deployed successfully!"
          echo "üåê Health check: https://creator-tools-api.ckorhonen.workers.dev/health"
